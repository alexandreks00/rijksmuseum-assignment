{
  "stats": {
    "suites": 5,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-01-10T08:09:30.132Z",
    "end": "2024-01-10T08:09:32.450Z",
    "duration": 2318,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5bf9a1ca-90dc-4942-9921-3069b00aff0c",
      "title": "",
      "fullFile": "cypress/e2e/apitesting.spec.cy.js",
      "file": "cypress/e2e/apitesting.spec.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "22fee36d-8721-4330-ad7b-c19766322cc4",
          "title": "API Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve data from the API with a random authorName",
              "fullTitle": "API Test should retrieve data from the API with a random authorName",
              "timedOut": null,
              "duration": 710,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get a random authorName from the list\nconst randomAuthorName = authorNames[Math.floor(Math.random() * authorNames.length)];\n// Make a request to the API with the random authorName\ncy.request({\n  method: 'GET',\n  url: `https://www.rijksmuseum.nl/api/nl/collection?key=0fiuZFh4&involvedMaker=${encodeURIComponent(randomAuthorName)}`\n}).then(response => {\n  // Assertions to ensure the response is successful\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('artObjects').and.to.be.an('array');\n  // You can perform additional assertions or log information as needed\n  cy.log(`API Response for ${randomAuthorName}:`, response.body);\n  // For example, you can check if the artObjects array is not empty\n  const artObjectsArray = response.body.artObjects;\n  expect(artObjectsArray.length).to.be.greaterThan(0);\n  cy.log(`Number of Art Objects: ${artObjectsArray.length}`);\n});",
              "err": {},
              "uuid": "8e3f37d8-8d7e-4769-9622-2b755c9eb2ec",
              "parentUUID": "22fee36d-8721-4330-ad7b-c19766322cc4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8e3f37d8-8d7e-4769-9622-2b755c9eb2ec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 710,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c66f9fdc-4c02-4416-b1e8-e6485126cf2d",
          "title": "API Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve data from the API with a random authorName and select a random objectNumber",
              "fullTitle": "API Test should retrieve data from the API with a random authorName and select a random objectNumber",
              "timedOut": null,
              "duration": 180,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get a random authorName from the list\nconst randomAuthorName = authorNames[Math.floor(Math.random() * authorNames.length)];\n// Make a request to the API with the random authorName\ncy.request({\n  method: 'GET',\n  url: `https://www.rijksmuseum.nl/api/nl/collection?key=0fiuZFh4&involvedMaker=${encodeURIComponent(randomAuthorName)}`\n}).then(response => {\n  // Assertions to ensure the response is successful\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('artObjects').and.to.be.an('array');\n  // You can perform additional assertions or log information as needed\n  cy.log(`API Response for ${randomAuthorName}:`, response.body);\n  // For example, select a random objectNumber from the artObjects array\n  const artObjectsArray = response.body.artObjects;\n  const randomArtObject = artObjectsArray[Math.floor(Math.random() * artObjectsArray.length)];\n  const randomObjectNumber = randomArtObject.objectNumber;\n  // Log the randomly selected objectNumber\n  cy.log(`Randomly selected objectNumber: ${randomObjectNumber}`);\n});",
              "err": {},
              "uuid": "6eda2f1d-02a1-49e3-aa51-ff4e886940a4",
              "parentUUID": "c66f9fdc-4c02-4416-b1e8-e6485126cf2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6eda2f1d-02a1-49e3-aa51-ff4e886940a4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 180,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6d803bc0-cd88-449a-8599-9f79944271a7",
          "title": "API Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve data from the API with a random authorName and select a random objectNumber",
              "fullTitle": "API Test should retrieve data from the API with a random authorName and select a random objectNumber",
              "timedOut": null,
              "duration": 794,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get a random authorName from the list\nconst randomAuthorName = authorNames[Math.floor(Math.random() * authorNames.length)];\n// Make a request to the API with the random authorName\ncy.request({\n  method: 'GET',\n  url: `https://www.rijksmuseum.nl/api/nl/collection?key=0fiuZFh4&involvedMaker=${encodeURIComponent(randomAuthorName)}`\n}).then(response => {\n  // Assertions to ensure the response is successful\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('artObjects').and.to.be.an('array');\n  // You can perform additional assertions or log information as needed\n  cy.log(`API Response for ${randomAuthorName}:`, response.body);\n  // Select a random objectNumber from the artObjects array\n  const artObjectsArray = response.body.artObjects;\n  const randomArtObject = artObjectsArray[Math.floor(Math.random() * artObjectsArray.length)];\n  const randomObjectNumber = randomArtObject.objectNumber;\n  // Log the randomly selected objectNumber\n  cy.log(`Randomly selected objectNumber: ${randomObjectNumber}`);\n  // Make a second request to the API using the randomly selected objectNumber\n  cy.request({\n    method: 'GET',\n    url: `https://www.rijksmuseum.nl/api/nl/collection/${randomObjectNumber}?key=0fiuZFh4`\n  }).then(secondResponse => {\n    // Assertions for the second API call\n    expect(secondResponse.status).to.equal(200);\n    expect(secondResponse.body).to.have.property('artObject');\n    // Log the response of the second API call\n    cy.log(`API Response for objectNumber ${randomObjectNumber}:`, secondResponse.body);\n  });\n});",
              "err": {},
              "uuid": "f228dddd-5db1-4275-b42e-040530a1d64a",
              "parentUUID": "6d803bc0-cd88-449a-8599-9f79944271a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f228dddd-5db1-4275-b42e-040530a1d64a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 794,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c1efa515-0e9c-4703-a7e2-782c4cdf7c6a",
          "title": "API Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve data from the API with a random authorName and select a random objectNumber",
              "fullTitle": "API Test should retrieve data from the API with a random authorName and select a random objectNumber",
              "timedOut": null,
              "duration": 294,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get a random authorName from the list\nconst randomAuthorName = authorNames[Math.floor(Math.random() * authorNames.length)];\n// Make a request to the API with the random authorName\ncy.request({\n  method: 'GET',\n  url: `https://www.rijksmuseum.nl/api/nl/collection?key=0fiuZFh4&involvedMaker=${encodeURIComponent(randomAuthorName)}`\n}).then(response => {\n  // Assertions to ensure the response is successful\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('artObjects').and.to.be.an('array');\n  // Select a random objectNumber from the artObjects array\n  const artObjectsArray = response.body.artObjects;\n  const randomArtObject = artObjectsArray[Math.floor(Math.random() * artObjectsArray.length)];\n  const randomObjectNumber = randomArtObject.objectNumber;\n  // Log the randomly selected objectNumber\n  cy.log(`Randomly selected objectNumber: ${randomObjectNumber}`);\n  // Make a request to the API with the randomObjectNumber\n  cy.request({\n    method: 'GET',\n    url: `https://www.rijksmuseum.nl/api/nl/collection/${randomObjectNumber}?key=0fiuZFh4`\n  }).then(secondResponse => {\n    // Assertions for the second API call\n    expect(secondResponse.status).to.equal(200);\n    expect(secondResponse.body).to.have.property('artObject');\n    cy.log(`API Response for objectNumber ${randomObjectNumber}:`, secondResponse.body);\n    // Extract the title from the response\n    const title = secondResponse.body.artObject.title;\n    // Log the title to the console\n    cy.log(`Title of the art object: ${title}`);\n  });\n});",
              "err": {},
              "uuid": "de52059a-8d8f-42f7-9aa7-026b1442613d",
              "parentUUID": "c1efa515-0e9c-4703-a7e2-782c4cdf7c6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "de52059a-8d8f-42f7-9aa7-026b1442613d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 294,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ef3794f3-ce38-4734-94f1-c917467ddbd1",
          "title": "API Test for Rijksmuseum - Level 0",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve level information from z0",
              "fullTitle": "API Test for Rijksmuseum - Level 0 should retrieve level information from z0",
              "timedOut": null,
              "duration": 323,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'https://www.rijksmuseum.nl/api/nl/collection/BK-16676/tiles?key=0fiuZFh4'\n}).then(response => {\n  // Assert that the response status is 200 OK\n  expect(response.status).to.eq(200);\n  cy.log(response.body);\n  // Extract level information from the response body\n  const responseBody = JSON.parse(response.body);\n  const firstLevel = responseBody.levels[0];\n  cy.log(firstLevel.name, firstLevel.width, firstLevel.height);\n});",
              "err": {},
              "uuid": "ba5a2d35-067e-42b9-a4a8-1b1ff78b5d70",
              "parentUUID": "ef3794f3-ce38-4734-94f1-c917467ddbd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba5a2d35-067e-42b9-a4a8-1b1ff78b5d70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 323,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "html": true,
        "json": true,
        "reportDir": "cypress/reports",
        "reportFilename": "report",
        "overwrite": true
      },
      "version": "6.2.0"
    }
  }
}